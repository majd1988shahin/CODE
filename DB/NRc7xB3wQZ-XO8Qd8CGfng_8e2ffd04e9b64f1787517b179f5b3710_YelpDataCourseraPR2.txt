Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table =  10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
ii. Hours = 1562	
iii. Category = 2643
iv. Attribute = 1115
v. Review = 
	primary key id 	-> 10000
	foreign key business_id-> 8090
	foreign key user_id	-> 9581
vi. Checkin = 493
vii. Photo =
	primary key id 	-> 10000
	foreigen key business_id-> 6493
viii. Tip = 
	foreign key business_id-> 3979
	foreign key user_id	-> 537
ix. User = 10000
x. Friend = 11
xi. Elite_years = 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer:
	no
	
	SQL code used to arrive at answer:
SELECT count(*) from User
Where 
name is not NULL OR
review_count is  NULL OR
yelping_since is  NULL OR
useful is  NULL OR
funny is  NULL OR
cool is  NULL OR
fans is  NULL OR
average_stars is  NULL OR
compliment_hot is  NULL OR
compliment_more is  NULL OR
compliment_profile is  NULL OR
compliment_cute is  NULL OR
compliment_list is  NULL OR
compliment_note is  NULL OR
compliment_plain is  NULL OR
compliment_cool is  NULL OR
compliment_funny is  NULL OR
compliment_writer is  NULL OR
compliment_photos is  NULL 
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:1.0	max:5.0	avg:3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:1.0	max:5.0	avg:3.6549 
		
	
	iii. Table: Tip, Column: Likes
	
		min:0		max:2		avg:0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:1		max:53		avg:1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:0		max:2000	avg:24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
		SELECT city,SUM(review_count)as x
		FROM business
		GROUP BY city
		ORDER BY x DESC;
	
	Copy and Paste the Result Below:
		+-----------------+-------+
		| city            |     x |
		+-----------------+-------+
		| Las Vegas       | 82854 |
		| Phoenix         | 34503 |
		| Toronto         | 24113 |
		| Scottsdale      | 20614 |
		| Charlotte       | 12523 |
		| Henderson       | 10871 |
		| Tempe           | 10504 |
		| Pittsburgh      |  9798 |
		| Montréal        |  9448 |
		| Chandler        |  8112 |
		| Mesa            |  6875 |
		| Gilbert         |  6380 |
		| Cleveland       |  5593 |
		| Madison         |  5265 |
		| Glendale        |  4406 |
		| Mississauga     |  3814 |
		| Edinburgh       |  2792 |
		| Peoria          |  2624 |
		| North Las Vegas |  2438 |
		| Markham         |  2352 |
		| Champaign       |  2029 |
		| Stuttgart       |  1849 |
		| Surprise        |  1520 |
		| Lakewood        |  1465 |
		| Goodyear        |  1155 |
		+-----------------+-------+
		(Output limit exceeded, 25 of 362 total rows shown)

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:
	SELECT SUM((stars-x_avg)*(stars-x_avg))/x_count
	FROM business,(SELECT
	  AVG(stars) AS x_avg,
	  COUNT(stars) AS x_count
	  FROM business
	  WHERE city ='Avon'
	  )	
	  WHERE city ='Avon';
	  
	  SELECT stars, SUM(review_count) AS count 
	  FROM business 
	  WHERE city = 'Beachwood' 
	  GROUP BY stars;
	  


Copy and Paste the Resulting Table Below (2 columns – star rating and count):

	+--------------------------+
	| SUM(stars-x_avg)/x_count |
	+--------------------------+
	|                    204.9 |
	+--------------------------+
	
			+-------+-------+
			| stars | count |
			+-------+-------+
			|   1.5 |    10 |
			|   2.5 |     6 |
			|   3.5 |    88 |
			|   4.0 |    21 |
			|   4.5 |    31 |
			|   5.0 |     3 |
			+-------+-------+
			


ii. Beachwood

SQL code used to arrive at answer:
	SELECT SUM((stars-x_avg)*(stars-x_avg))/x_count
	FROM business,(SELECT
	  AVG(stars) AS x_avg,
	  COUNT(stars) AS x_count
	  FROM business
	  WHERE city ='Beachwood'
	  )	
	  WHERE city ='Beachwood';
	  	
	SELECT stars,SUM(review_count)
	FROM business
	WHERE city ='Beachwood'
	GROUP BY stars;
	
Copy and Paste the Resulting Table Below (2 columns – star rating and count):
+------------------------------------------+
| SUM((stars-x_avg)*(stars-x_avg))/x_count |
+------------------------------------------+
|                            1.01658163265 |
+------------------------------------------+
			+-------+-------+
			| stars | count |
			+-------+-------+
			|   2.0 |     8 |
			|   2.5 |     3 |
			|   3.0 |    11 |
			|   3.5 |     6 |
			|   4.0 |    69 |
			|   4.5 |    17 |
			|   5.0 |    23 |
			+-------+-------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
	SELECT name ,review_count
	FROM user
	ORDER BY review_count DESC
	LIMIT 3;
		
	Copy and Paste the Result Below:
	+--------+--------------+
	| name   | review_count |
	+--------+--------------+
	| Gerald |         2000 |
	| Sara   |         1629 |
	| Yuri   |         1339 |
	+--------+--------------+		


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	--
	Answer:
	-- using Pearson correlation coefficient	
	correlation^2= 0.437136492915
	correlation= 0.66116298513
	the correlation exists but it is not very strong
	
	
	SQL code used to arrive at answer:
	--from wiki https://en.wikipedia.org/wiki/Pearson_correlation_coefficient
	-- i will caculate the squerd Pearson correlation coefficient, it is not possible to get sqrt function in sqlite3
	
	SELECT ((SUM(review_count*funs)- n * review_count_avg*funs_avg))*((SUM(review_count*funs)- n * review_count_avg*funs_avg))/((SUM(review_count*review_count)-n*review_count_avg*review_count_avg)*(SUM(funs*funs)-n*funs_avg*funs_avg))
	FROM user, (SELECT 
		AVG(review_count) as review_count_avg,
		AVG(funs) as funs_avg,
		COUNT(funs) as n
		FROM user)

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:
		love ->1780
		hate -> 232
	
	SQL code used to arrive at answer:
	  SELECT COUNT(id)
	  FROM review
	  WHERE text like '%love%'
	
	  SELECT COUNT(id)
	  FROM review
	  WHERE text like '%hate%'
    
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
	SELECT name ,fans
	FROM user 
	ORDER BY fans DESC
	LIMIT 10;
	
	Copy and Paste the Result Below:

	+-----------+------+
	| name      | fans |
	+-----------+------+
	| Amy       |  503 |
	| Mimi      |  497 |
	| Harald    |  311 |
	| Gerald    |  253 |
	| Christine |  173 |
	| Lisa      |  159 |
	| Cat       |  133 |
	| William   |  126 |
	| Fran      |  124 |
	| Lissa     |  120 |
	+-----------+------+
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	category :  Shopping 
	city : Las Vegas
i. Do the two groups you chose to analyze have a different distribution of hours?
the lower stars business can be until 22:00 

ii. Do the two groups you chose to analyze have a different number of reviews?
         the 3-4 stars business have more previews than the 2 and 5 
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
	i thinke that the people doing the 3-4 Stars business more than the cheap 2 business or the expensive 5 stars business
SQL code used for analysis:
--Las Vegas

SELECT  AVG(b.stars),count(b.stars) ,avg (review_count), h.hours
FROM (business b left join category c on b.id=c.business_id) LEFT JOIN hours h on b.id=h.business_id
WHERE b.city = 'Las Vegas'
AND c.category is 'Shopping'
GROUP BY b.stars
		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
         the open business have more review count in average than the closed oncs
         open->30.8120670391
         closed ->23.1463096016
ii. Difference 2:
         the open business have high checkin count in averag than the closed onxs
         open-> 1.656
         closed->1.25
         
         
SQL code used for analysis:
SELECT b.is_open, AVG (b.stars), AVG(b.review_count), AVG(c.count)
FROM business b LEFT JOIN checkin c on b.id=c.business_id
GROUP BY is_open
+---------+---------------+---------------------+---------------+
| is_open | AVG (b.stars) | AVG(b.review_count) |  AVG(c.count) |
+---------+---------------+---------------------+---------------+
|       0 | 3.50947093403 |       23.1463096016 |          1.25 |
|       1 | 3.66039106145 |       30.8120670391 | 1.65261044177 |
+---------+---------------+---------------------+---------------+
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
         anormale situations  and data
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
          I think it is useful to find out the anormale situations                 
          user.average_stars:       there are users who are rating anormally , thier average stars over 4.7 and anothers fewer than 1.3
          tip.time, tip.likes:      There are many tips that older than 7 years and have no likes , i think they are just trash
          
iii. Output of your finished dataset:
         anormale users count 2816
         trash tips count 4163
         
iv. Provide the SQL code you used to create your final dataset:
--anormale users count
SELECT COUNT(*)
From user
WHERE average_stars <1.3 or average_stars >4.7 

--trash tips
SELECT count(*) from tip
WHERE likes=0 AND STRFTIME('%Y','now')-STRFTIME('%Y',date)>7


